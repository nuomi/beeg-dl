#!/usr/bin/env python


import re, urllib2, pickle, sys
import argparse
import os
import pycurl

pageurl_regex = re.compile('http://beeg.com\/\d+')
mp4url_regex = re.compile('http://.+speed.+480p.+\.mp4')
tumb_id_regex = re.compile('tumb_id.+[0-9+,+\[+\]+];')
tumb_id_i_single_regex = re.compile('[0-9]+')
datafile = 'ret.pk'
ret = []
rate_limit= 40*1024

def extract():
    print ("Extracting...")
    f = open(datafile, 'w')
    pageurls = []
    vidzurls = []

    for i in range(1):
        html_src = urllib2.urlopen('http://beeg.com/page-/'+str(i)+'/').read() 
	tumb_matches = tumb_id_regex.findall(html_src)
	tumbs = tumb_matches[0]
	single_tumb = tumb_id_i_single_regex.findall(tumbs)
        pageurls.extend(set(single_tumb))

    k=0
    for pageurl in pageurls:
	if k > 13:
		break
	pageurl = 'http://beeg.com/'+pageurl
        print('['+str(k)+']looking into '+ pageurl+ '...')
        html_src = urllib2.urlopen(pageurl).read()
        matches = mp4url_regex.findall(html_src)
        vidzurls.extend(set(matches))
        print("\t\tfound "+ str(len(matches)))
	if len(matches)>0:
		videourl=matches[0]
		f.write(videourl+"\n")
        	k=k+1


def curl_progress(total, existing, upload_t, upload_d):
    try:
        frac = float(existing)/float(total)
    except:
        frac = 0
        print "Downloaded %d/%d (%0.2f%%)" % (existing, total, frac)

def download():
    if args['dd']:
    	dest_dir = args['dd']
    else:
	dest_dir = "./"

    print ("Downloading... in "+dest_dir)
    f = open(datafile, 'r')
    for vidzurl in f:
	print "D: "+vidzurl
        filename = os.path.basename(vidzurl)
        if os.path.exists(filename):
		pass #TODO
	else:
		u = urllib2.urlopen(vidzurl)
		f = open(dest_dir+filename, 'wb')
		meta = u.info()
		file_size = int(meta.getheaders("Content-Length")[0])
		print "Downloading: %s Bytes: %s" % (filename, file_size)

		file_size_dl = 0
		block_sz = 8192
		while True:
		    buffer = u.read(block_sz)
		    if not buffer:
		        break

		    file_size_dl += len(buffer)
		    f.write(buffer)
		    status = r"%10d  [%3.2f%%]" % (file_size_dl, file_size_dl * 100. / file_size)
		    status = status + chr(8)*(len(status)+1)
		    print status,

		f.close()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='download vidz from beeg.com')
    parser.add_argument('-u',  action='store_true',
                      help='get vidz urls, and save them to a data file.')

    parser.add_argument('-d', action='store_true',
                      help='download vidz according to data file.')

    parser.add_argument('-a', action='store_false',
                      help='get urls and download them.(default)')
    
    parser.add_argument('-dd', help='destination dir', type=str)

    args = vars(parser.parse_args())

    print args['dd']

    if args['u']:
        extract()
        sys.exit()

    elif args['d']:
        download()
        sys.exit()

    else:
        extract()
        download()
        sys.exit()
